{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Pure Ruby implementation of Transbank's Webpay protocol","google":"UA-18659564-5","body":"# TBK\r\n\r\nPure Ruby implementation of Transbank's Webpay KCC 6.0\r\n\r\n## Disclaimer\r\n\r\nThis library is not developed, supported nor endorsed in any way by Transbank S.A.\r\nand is the result of reverse engineering Transbank's Integration Kit (aka. KCC)\r\nfor interoperability purposes allowed by\r\n[Chilean Law 20.435 Article 71 Ã‘ Section b](http://www.leychile.cl/Navegar?idNorma=1012827)\r\n\r\n## Usage\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'tbk'\r\n```\r\n\r\nTo start a payment from your application\r\n\r\n```ruby\r\nclass WebpayController < ApplicationController\r\n\r\n  # ...\r\n\r\n  # Start a payment\r\n  def pay\r\n    # Initialyze you commerce\r\n    commerce = TBK::Commerce.new({\r\n      id: YOUR_COMMERCE_ID,\r\n      key: YOUR_RSA_KEY\r\n    })\r\n\r\n    # Setup the payment\r\n    payment = TBK::Webpay::Payment.new({\r\n      commerce: commerce,\r\n      amount: ORDER_AMOUNT,\r\n      order_id: ORDER_ID,\r\n      success_url: webpay_success_url,\r\n      # Webpay can only access the HTTP protocol to a direct IP address (keep that in mind)\r\n      confirmation_url: webpay_confirmation_url(host: SERVER_IP_ADDRESS, protocol: 'http'),\r\n\r\n      # Optionaly supply:\r\n      session_id: SOME_SESSION_VALUE,\r\n      failure_url: webpay_failure_url # success_url is used by default\r\n    })\r\n\r\n    # Redirect the user to Webpay\r\n    redirect_to payment.redirect_url\r\n  end\r\n\r\n  # ...\r\nend\r\n```\r\n\r\nAnd to process a payment\r\n```ruby\r\nclass WebpayController < ApplicationController\r\n\r\n  # ...\r\n\r\n  # Confirmation callback executed from Webpay servers\r\n  def confirmation\r\n    # Initialyze you commerce\r\n    commerce = TBK::Commerce.new({\r\n      id: YOUR_COMMERCE_ID,\r\n      key: YOUR_RSA_KEY\r\n    })\r\n\r\n    # Read the confirmation data from the request\r\n    confirmation = TBK::Webpay::Confirmation.new({\r\n      commerce: commerce,\r\n      post: request.body\r\n    })\r\n\r\n    if # confirmation is invalid for some reason (wrong order_id or amount, double payment, etc...)\r\n      render text: confirmation.reject\r\n      return # reject and stop execution\r\n    end\r\n\r\n    if confirmation.success?\r\n      # EXITO!\r\n      # perform everything you have to do here.\r\n    end\r\n\r\n    # Acknowledge payment\r\n    render text: confirmation.acknowledge\r\n  end\r\n\r\n  # ...\r\n\r\nend\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## License\r\n\r\n```\r\nCopyright (c) 2013 Seba Gamboa\r\n\r\nMIT License\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n```\r\n","name":"TBK Gem"}